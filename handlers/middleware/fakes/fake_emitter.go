// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/handlers/middleware"
)

type FakeEmitter struct {
	IncrementCounterStub        func(delta int)
	incrementCounterMutex       sync.RWMutex
	incrementCounterArgsForCall []struct {
		delta int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEmitter) IncrementCounter(delta int) {
	fake.incrementCounterMutex.Lock()
	fake.incrementCounterArgsForCall = append(fake.incrementCounterArgsForCall, struct {
		delta int
	}{delta})
	fake.recordInvocation("IncrementCounter", []interface{}{delta})
	fake.incrementCounterMutex.Unlock()
	if fake.IncrementCounterStub != nil {
		fake.IncrementCounterStub(delta)
	}
}

func (fake *FakeEmitter) IncrementCounterCallCount() int {
	fake.incrementCounterMutex.RLock()
	defer fake.incrementCounterMutex.RUnlock()
	return len(fake.incrementCounterArgsForCall)
}

func (fake *FakeEmitter) IncrementCounterArgsForCall(i int) int {
	fake.incrementCounterMutex.RLock()
	defer fake.incrementCounterMutex.RUnlock()
	return fake.incrementCounterArgsForCall[i].delta
}

func (fake *FakeEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.incrementCounterMutex.RLock()
	defer fake.incrementCounterMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ middleware.Emitter = new(FakeEmitter)
