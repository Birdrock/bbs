// Code generated by counterfeiter. DO NOT EDIT.
package formatfakes

import (
	"sync"

	"code.cloudfoundry.org/bbs/format"
)

type FakeProtoVersioner struct {
	ResetStub         func()
	resetMutex        sync.RWMutex
	resetArgsForCall  []struct{}
	StringStub        func() string
	stringMutex       sync.RWMutex
	stringArgsForCall []struct{}
	stringReturns     struct {
		result1 string
	}
	stringReturnsOnCall map[int]struct {
		result1 string
	}
	ProtoMessageStub        func()
	protoMessageMutex       sync.RWMutex
	protoMessageArgsForCall []struct{}
	VersionStub             func() format.Version
	versionMutex            sync.RWMutex
	versionArgsForCall      []struct{}
	versionReturns          struct {
		result1 format.Version
	}
	versionReturnsOnCall map[int]struct {
		result1 format.Version
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProtoVersioner) Reset() {
	fake.resetMutex.Lock()
	fake.resetArgsForCall = append(fake.resetArgsForCall, struct{}{})
	fake.recordInvocation("Reset", []interface{}{})
	fake.resetMutex.Unlock()
	if fake.ResetStub != nil {
		fake.ResetStub()
	}
}

func (fake *FakeProtoVersioner) ResetCallCount() int {
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	return len(fake.resetArgsForCall)
}

func (fake *FakeProtoVersioner) String() string {
	fake.stringMutex.Lock()
	ret, specificReturn := fake.stringReturnsOnCall[len(fake.stringArgsForCall)]
	fake.stringArgsForCall = append(fake.stringArgsForCall, struct{}{})
	fake.recordInvocation("String", []interface{}{})
	fake.stringMutex.Unlock()
	if fake.StringStub != nil {
		return fake.StringStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.stringReturns.result1
}

func (fake *FakeProtoVersioner) StringCallCount() int {
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	return len(fake.stringArgsForCall)
}

func (fake *FakeProtoVersioner) StringReturns(result1 string) {
	fake.StringStub = nil
	fake.stringReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeProtoVersioner) StringReturnsOnCall(i int, result1 string) {
	fake.StringStub = nil
	if fake.stringReturnsOnCall == nil {
		fake.stringReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.stringReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeProtoVersioner) ProtoMessage() {
	fake.protoMessageMutex.Lock()
	fake.protoMessageArgsForCall = append(fake.protoMessageArgsForCall, struct{}{})
	fake.recordInvocation("ProtoMessage", []interface{}{})
	fake.protoMessageMutex.Unlock()
	if fake.ProtoMessageStub != nil {
		fake.ProtoMessageStub()
	}
}

func (fake *FakeProtoVersioner) ProtoMessageCallCount() int {
	fake.protoMessageMutex.RLock()
	defer fake.protoMessageMutex.RUnlock()
	return len(fake.protoMessageArgsForCall)
}

func (fake *FakeProtoVersioner) Version() format.Version {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct{}{})
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if fake.VersionStub != nil {
		return fake.VersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.versionReturns.result1
}

func (fake *FakeProtoVersioner) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *FakeProtoVersioner) VersionReturns(result1 format.Version) {
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 format.Version
	}{result1}
}

func (fake *FakeProtoVersioner) VersionReturnsOnCall(i int, result1 format.Version) {
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 format.Version
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 format.Version
	}{result1}
}

func (fake *FakeProtoVersioner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resetMutex.RLock()
	defer fake.resetMutex.RUnlock()
	fake.stringMutex.RLock()
	defer fake.stringMutex.RUnlock()
	fake.protoMessageMutex.RLock()
	defer fake.protoMessageMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProtoVersioner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ format.ProtoVersioner = new(FakeProtoVersioner)
