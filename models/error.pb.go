// Code generated by protoc-gen-gogo.
// source: error.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Error_Type int32

const (
	Error_UnknownError               Error_Type = 0
	Error_InvalidRecord              Error_Type = 3
	Error_InvalidRequest             Error_Type = 4
	Error_InvalidResponse            Error_Type = 5
	Error_InvalidProtobufMessage     Error_Type = 6
	Error_InvalidJSON                Error_Type = 7
	Error_FailedToOpenEnvelope       Error_Type = 8
	Error_InvalidStateTransition     Error_Type = 9
	Error_ResourceConflict           Error_Type = 11
	Error_ResourceExists             Error_Type = 12
	Error_ResourceNotFound           Error_Type = 13
	Error_RouterError                Error_Type = 14
	Error_ActualLRPCannotBeClaimed   Error_Type = 15
	Error_ActualLRPCannotBeStarted   Error_Type = 16
	Error_ActualLRPCannotBeCrashed   Error_Type = 17
	Error_ActualLRPCannotBeFailed    Error_Type = 18
	Error_ActualLRPCannotBeRemoved   Error_Type = 19
	Error_ActualLRPCannotBeUnclaimed Error_Type = 21
	Error_RunningOnDifferentCell     Error_Type = 24
	Error_GUIDGeneration             Error_Type = 26
	Error_Deserialize                Error_Type = 27
	Error_Deadlock                   Error_Type = 28
	Error_Unrecoverable              Error_Type = 29
	Error_LockCollision              Error_Type = 30
	Error_Timeout                    Error_Type = 31
)

var Error_Type_name = map[int32]string{
	0:  "UnknownError",
	3:  "InvalidRecord",
	4:  "InvalidRequest",
	5:  "InvalidResponse",
	6:  "InvalidProtobufMessage",
	7:  "InvalidJSON",
	8:  "FailedToOpenEnvelope",
	9:  "InvalidStateTransition",
	11: "ResourceConflict",
	12: "ResourceExists",
	13: "ResourceNotFound",
	14: "RouterError",
	15: "ActualLRPCannotBeClaimed",
	16: "ActualLRPCannotBeStarted",
	17: "ActualLRPCannotBeCrashed",
	18: "ActualLRPCannotBeFailed",
	19: "ActualLRPCannotBeRemoved",
	21: "ActualLRPCannotBeUnclaimed",
	24: "RunningOnDifferentCell",
	26: "GUIDGeneration",
	27: "Deserialize",
	28: "Deadlock",
	29: "Unrecoverable",
	30: "LockCollision",
	31: "Timeout",
}
var Error_Type_value = map[string]int32{
	"UnknownError":               0,
	"InvalidRecord":              3,
	"InvalidRequest":             4,
	"InvalidResponse":            5,
	"InvalidProtobufMessage":     6,
	"InvalidJSON":                7,
	"FailedToOpenEnvelope":       8,
	"InvalidStateTransition":     9,
	"ResourceConflict":           11,
	"ResourceExists":             12,
	"ResourceNotFound":           13,
	"RouterError":                14,
	"ActualLRPCannotBeClaimed":   15,
	"ActualLRPCannotBeStarted":   16,
	"ActualLRPCannotBeCrashed":   17,
	"ActualLRPCannotBeFailed":    18,
	"ActualLRPCannotBeRemoved":   19,
	"ActualLRPCannotBeUnclaimed": 21,
	"RunningOnDifferentCell":     24,
	"GUIDGeneration":             26,
	"Deserialize":                27,
	"Deadlock":                   28,
	"Unrecoverable":              29,
	"LockCollision":              30,
	"Timeout":                    31,
}

func (x Error_Type) Enum() *Error_Type {
	p := new(Error_Type)
	*p = x
	return p
}
func (x Error_Type) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(Error_Type_name, int32(x))
}
func (x *Error_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Error_Type_value, data, "Error_Type")
	if err != nil {
		return err
	}
	*x = Error_Type(value)
	return nil
}
func (Error_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorError, []int{0, 0} }

type Error struct {
	Type    Error_Type `protobuf:"varint,1,opt,name=type,enum=models.Error_Type" json:"type"`
	Message string     `protobuf:"bytes,2,opt,name=message" json:"message"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorError, []int{0} }

func (m *Error) GetType() Error_Type {
	if m != nil {
		return m.Type
	}
	return Error_UnknownError
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Error)(nil), "models.Error")
	proto.RegisterEnum("models.Error_Type", Error_Type_name, Error_Type_value)
}
func (x Error_Type) String() string {
	s, ok := Error_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.Error{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringError(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintError(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x12
	i++
	i = encodeVarintError(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	return i, nil
}

func encodeFixed64Error(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Error(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintError(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Error) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovError(uint64(m.Type))
	l = len(m.Message)
	n += 1 + l + sovError(uint64(l))
	return n
}

func sovError(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozError(x uint64) (n int) {
	return sovError(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringError(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowError
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Error_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowError
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthError
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipError(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthError
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipError(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowError
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowError
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthError
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowError
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipError(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthError = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowError   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("error.proto", fileDescriptorError) }

var fileDescriptorError = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x52, 0xdb, 0x3c,
	0x14, 0xc5, 0x63, 0x3e, 0x03, 0x46, 0xe1, 0xcf, 0x45, 0xe4, 0x83, 0x10, 0xa8, 0x60, 0xbc, 0x62,
	0x41, 0xc3, 0x4c, 0xdf, 0xa0, 0x24, 0xc0, 0xd0, 0xa1, 0xc0, 0x98, 0xe4, 0x01, 0x84, 0x7d, 0x13,
	0x34, 0x28, 0x92, 0x2b, 0xc9, 0x69, 0xe9, 0xaa, 0x8f, 0xd0, 0xc7, 0xe8, 0x6b, 0x74, 0xc7, 0x92,
	0x65, 0x57, 0x9d, 0xe2, 0x6e, 0xda, 0x1d, 0x8f, 0xd0, 0xb1, 0x13, 0x18, 0x66, 0xc8, 0xce, 0x3a,
	0x3f, 0x9d, 0xe3, 0x7b, 0xae, 0x48, 0x15, 0x8d, 0xd1, 0xa6, 0x99, 0x1a, 0xed, 0x34, 0x9d, 0x19,
	0xe8, 0x04, 0xa5, 0x6d, 0xbc, 0xee, 0x0b, 0x77, 0x95, 0x5d, 0x36, 0x63, 0x3d, 0xd8, 0xeb, 0xeb,
	0xbe, 0xde, 0x2b, 0xf1, 0x65, 0xd6, 0x2b, 0x4f, 0xe5, 0xa1, 0xfc, 0x1a, 0xd9, 0xc2, 0xef, 0xd3,
	0x64, 0xfa, 0xa0, 0x88, 0xa1, 0xbb, 0xc4, 0x77, 0x37, 0x29, 0xd6, 0xbd, 0x6d, 0x6f, 0x67, 0xf1,
	0x0d, 0x6d, 0x8e, 0xf2, 0x9a, 0x25, 0x6c, 0x76, 0x6e, 0x52, 0xdc, 0xf7, 0x6f, 0x7f, 0x6e, 0x55,
	0xa2, 0xf2, 0x16, 0x65, 0x64, 0x76, 0x80, 0xd6, 0xf2, 0x3e, 0xd6, 0xa7, 0xb6, 0xbd, 0x9d, 0xb9,
	0x31, 0x7c, 0x14, 0xc3, 0xbf, 0x3e, 0xf1, 0x0b, 0x13, 0x05, 0x32, 0xdf, 0x55, 0xd7, 0x4a, 0x7f,
	0x54, 0x65, 0x12, 0x54, 0xe8, 0x32, 0x59, 0x38, 0x56, 0x43, 0x2e, 0x45, 0x12, 0x61, 0xac, 0x4d,
	0x02, 0xff, 0x51, 0x4a, 0x16, 0x9f, 0xa4, 0x0f, 0x19, 0x5a, 0x07, 0x3e, 0x5d, 0x21, 0x4b, 0x4f,
	0x9a, 0x4d, 0xb5, 0xb2, 0x08, 0xd3, 0xb4, 0x41, 0x56, 0xc7, 0xe2, 0xf9, 0xb8, 0xd6, 0xfb, 0xd1,
	0x0f, 0x61, 0x86, 0x2e, 0x91, 0xea, 0x98, 0xbd, 0xbb, 0x38, 0x3b, 0x85, 0x59, 0x5a, 0x27, 0xb5,
	0x43, 0x2e, 0x24, 0x26, 0x1d, 0x7d, 0x96, 0xa2, 0x3a, 0x50, 0x43, 0x94, 0x3a, 0x45, 0x08, 0x9e,
	0xc5, 0x5c, 0x38, 0xee, 0xb0, 0x63, 0xb8, 0xb2, 0xc2, 0x09, 0xad, 0x60, 0x8e, 0xd6, 0x08, 0x44,
	0x68, 0x75, 0x66, 0x62, 0x6c, 0x69, 0xd5, 0x93, 0x22, 0x76, 0x50, 0x2d, 0x26, 0x7c, 0x54, 0x0f,
	0x3e, 0x09, 0xeb, 0x2c, 0xcc, 0x3f, 0xbf, 0x79, 0xaa, 0xdd, 0xa1, 0xce, 0x54, 0x02, 0x0b, 0xc5,
	0x18, 0x91, 0xce, 0x1c, 0x9a, 0x51, 0xdf, 0x45, 0xba, 0x49, 0xea, 0x6f, 0x63, 0x97, 0x71, 0x79,
	0x12, 0x9d, 0xb7, 0xb8, 0x52, 0xda, 0xed, 0x63, 0x4b, 0x72, 0x31, 0xc0, 0x04, 0x96, 0x26, 0xd2,
	0x0b, 0xc7, 0x8d, 0xc3, 0x04, 0x60, 0xb2, 0xd7, 0x70, 0x7b, 0x85, 0x09, 0x2c, 0xd3, 0x0d, 0xb2,
	0xf6, 0x82, 0x8e, 0x1a, 0x03, 0x9d, 0x68, 0x8d, 0x70, 0xa0, 0x87, 0x98, 0xc0, 0x0a, 0x65, 0xa4,
	0xf1, 0x82, 0x76, 0x55, 0x3c, 0x1e, 0xeb, 0xff, 0x62, 0x43, 0x51, 0xa6, 0x94, 0x50, 0xfd, 0x33,
	0xd5, 0x16, 0xbd, 0x1e, 0x1a, 0x54, 0xae, 0x85, 0x52, 0x42, 0xbd, 0xd8, 0xc5, 0x51, 0xf7, 0xb8,
	0x7d, 0x84, 0x0a, 0x0d, 0x2f, 0xb7, 0xd6, 0x28, 0x5a, 0xb7, 0xd1, 0xa2, 0x11, 0x5c, 0x8a, 0xcf,
	0x08, 0x1b, 0x74, 0x9e, 0x04, 0x6d, 0xe4, 0x89, 0xd4, 0xf1, 0x35, 0x6c, 0x16, 0x6f, 0xde, 0x55,
	0x06, 0x63, 0x3d, 0x44, 0xc3, 0x2f, 0x25, 0xc2, 0xab, 0x42, 0x3a, 0xd1, 0xf1, 0x75, 0x4b, 0x4b,
	0x29, 0x6c, 0x11, 0xc2, 0x68, 0x95, 0xcc, 0x76, 0xc4, 0x00, 0x75, 0xe6, 0x60, 0x2b, 0xf4, 0x03,
	0x0f, 0xbc, 0xd0, 0x0f, 0xa6, 0x60, 0x2a, 0xf4, 0x03, 0x02, 0x24, 0xf4, 0x83, 0x1a, 0xd4, 0x42,
	0x3f, 0x58, 0x85, 0xd5, 0xd0, 0x0f, 0xd6, 0x60, 0x2d, 0xf4, 0x83, 0x75, 0x58, 0xdf, 0xdf, 0xbd,
	0xbb, 0x67, 0xde, 0x8f, 0x7b, 0x56, 0x79, 0xb8, 0x67, 0xde, 0x97, 0x9c, 0x79, 0xdf, 0x72, 0x56,
	0xb9, 0xcd, 0x99, 0x77, 0x97, 0x33, 0xef, 0x57, 0xce, 0xbc, 0x3f, 0x39, 0xab, 0x3c, 0xe4, 0xcc,
	0xfb, 0xfa, 0x9b, 0x55, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x93, 0x01, 0x1e, 0x1d, 0x36, 0x03,
	0x00, 0x00,
}
