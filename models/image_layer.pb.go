// Code generated by protoc-gen-gogo.
// source: image_layer.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ImageLayer_DigestAlgorithm int32

const (
	DigestAlgorithmInvalid ImageLayer_DigestAlgorithm = 0
	DigestAlgorithmSha256  ImageLayer_DigestAlgorithm = 1
	DigestAlgorithmSha512  ImageLayer_DigestAlgorithm = 2
	DigestAlgorithmSha1    ImageLayer_DigestAlgorithm = 3
)

var ImageLayer_DigestAlgorithm_name = map[int32]string{
	0: "DigestAlgorithmInvalid",
	1: "SHA256",
	2: "SHA512",
	3: "SHA1",
}
var ImageLayer_DigestAlgorithm_value = map[string]int32{
	"DigestAlgorithmInvalid": 0,
	"SHA256":                 1,
	"SHA512":                 2,
	"SHA1":                   3,
}

func (x ImageLayer_DigestAlgorithm) Enum() *ImageLayer_DigestAlgorithm {
	p := new(ImageLayer_DigestAlgorithm)
	*p = x
	return p
}
func (x ImageLayer_DigestAlgorithm) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ImageLayer_DigestAlgorithm_name, int32(x))
}
func (x *ImageLayer_DigestAlgorithm) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageLayer_DigestAlgorithm_value, data, "ImageLayer_DigestAlgorithm")
	if err != nil {
		return err
	}
	*x = ImageLayer_DigestAlgorithm(value)
	return nil
}
func (ImageLayer_DigestAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImageLayer, []int{0, 0}
}

type ImageLayer_MediaType int32

const (
	MediaTypeInvalid ImageLayer_MediaType = 0
	MediaTypeTgz     ImageLayer_MediaType = 1
	MediaTypeTar     ImageLayer_MediaType = 2
	MediaTypeZip     ImageLayer_MediaType = 3
)

var ImageLayer_MediaType_name = map[int32]string{
	0: "MediaTypeInvalid",
	1: "TGZ",
	2: "TAR",
	3: "ZIP",
}
var ImageLayer_MediaType_value = map[string]int32{
	"MediaTypeInvalid": 0,
	"TGZ":              1,
	"TAR":              2,
	"ZIP":              3,
}

func (x ImageLayer_MediaType) Enum() *ImageLayer_MediaType {
	p := new(ImageLayer_MediaType)
	*p = x
	return p
}
func (x ImageLayer_MediaType) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ImageLayer_MediaType_name, int32(x))
}
func (x *ImageLayer_MediaType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageLayer_MediaType_value, data, "ImageLayer_MediaType")
	if err != nil {
		return err
	}
	*x = ImageLayer_MediaType(value)
	return nil
}
func (ImageLayer_MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorImageLayer, []int{0, 1}
}

type ImageLayer_Type int32

const (
	LayerTypeInvalid   ImageLayer_Type = 0
	LayerTypeShared    ImageLayer_Type = 1
	LayerTypeExclusive ImageLayer_Type = 2
)

var ImageLayer_Type_name = map[int32]string{
	0: "LayerTypeInvalid",
	1: "SHARED",
	2: "EXCLUSIVE",
}
var ImageLayer_Type_value = map[string]int32{
	"LayerTypeInvalid": 0,
	"SHARED":           1,
	"EXCLUSIVE":        2,
}

func (x ImageLayer_Type) Enum() *ImageLayer_Type {
	p := new(ImageLayer_Type)
	*p = x
	return p
}
func (x ImageLayer_Type) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(ImageLayer_Type_name, int32(x))
}
func (x *ImageLayer_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ImageLayer_Type_value, data, "ImageLayer_Type")
	if err != nil {
		return err
	}
	*x = ImageLayer_Type(value)
	return nil
}
func (ImageLayer_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorImageLayer, []int{0, 2} }

type ImageLayer struct {
	Name            string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Url             string                     `protobuf:"bytes,2,opt,name=url" json:"url"`
	DestinationPath string                     `protobuf:"bytes,3,opt,name=destination_path,json=destinationPath" json:"destination_path"`
	LayerType       ImageLayer_Type            `protobuf:"varint,4,opt,name=layer_type,json=layerType,enum=models.ImageLayer_Type" json:"layer_type"`
	MediaType       ImageLayer_MediaType       `protobuf:"varint,5,opt,name=media_type,json=mediaType,enum=models.ImageLayer_MediaType" json:"media_type"`
	DigestAlgorithm ImageLayer_DigestAlgorithm `protobuf:"varint,6,opt,name=digest_algorithm,json=digestAlgorithm,enum=models.ImageLayer_DigestAlgorithm" json:"digest_algorithm,omitempty"`
	DigestValue     string                     `protobuf:"bytes,7,opt,name=digest_value,json=digestValue" json:"digest_value,omitempty"`
}

func (m *ImageLayer) Reset()                    { *m = ImageLayer{} }
func (*ImageLayer) ProtoMessage()               {}
func (*ImageLayer) Descriptor() ([]byte, []int) { return fileDescriptorImageLayer, []int{0} }

func (m *ImageLayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageLayer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ImageLayer) GetDestinationPath() string {
	if m != nil {
		return m.DestinationPath
	}
	return ""
}

func (m *ImageLayer) GetLayerType() ImageLayer_Type {
	if m != nil {
		return m.LayerType
	}
	return LayerTypeInvalid
}

func (m *ImageLayer) GetMediaType() ImageLayer_MediaType {
	if m != nil {
		return m.MediaType
	}
	return MediaTypeInvalid
}

func (m *ImageLayer) GetDigestAlgorithm() ImageLayer_DigestAlgorithm {
	if m != nil {
		return m.DigestAlgorithm
	}
	return DigestAlgorithmInvalid
}

func (m *ImageLayer) GetDigestValue() string {
	if m != nil {
		return m.DigestValue
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageLayer)(nil), "models.ImageLayer")
	proto.RegisterEnum("models.ImageLayer_DigestAlgorithm", ImageLayer_DigestAlgorithm_name, ImageLayer_DigestAlgorithm_value)
	proto.RegisterEnum("models.ImageLayer_MediaType", ImageLayer_MediaType_name, ImageLayer_MediaType_value)
	proto.RegisterEnum("models.ImageLayer_Type", ImageLayer_Type_name, ImageLayer_Type_value)
}
func (x ImageLayer_DigestAlgorithm) String() string {
	s, ok := ImageLayer_DigestAlgorithm_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ImageLayer_MediaType) String() string {
	s, ok := ImageLayer_MediaType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ImageLayer_Type) String() string {
	s, ok := ImageLayer_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ImageLayer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ImageLayer)
	if !ok {
		that2, ok := that.(ImageLayer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.DestinationPath != that1.DestinationPath {
		return false
	}
	if this.LayerType != that1.LayerType {
		return false
	}
	if this.MediaType != that1.MediaType {
		return false
	}
	if this.DigestAlgorithm != that1.DigestAlgorithm {
		return false
	}
	if this.DigestValue != that1.DigestValue {
		return false
	}
	return true
}
func (this *ImageLayer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.ImageLayer{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "DestinationPath: "+fmt.Sprintf("%#v", this.DestinationPath)+",\n")
	s = append(s, "LayerType: "+fmt.Sprintf("%#v", this.LayerType)+",\n")
	s = append(s, "MediaType: "+fmt.Sprintf("%#v", this.MediaType)+",\n")
	s = append(s, "DigestAlgorithm: "+fmt.Sprintf("%#v", this.DigestAlgorithm)+",\n")
	s = append(s, "DigestValue: "+fmt.Sprintf("%#v", this.DigestValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringImageLayer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ImageLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageLayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.Url)))
	i += copy(dAtA[i:], m.Url)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.DestinationPath)))
	i += copy(dAtA[i:], m.DestinationPath)
	dAtA[i] = 0x20
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(m.LayerType))
	dAtA[i] = 0x28
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(m.MediaType))
	dAtA[i] = 0x30
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(m.DigestAlgorithm))
	dAtA[i] = 0x3a
	i++
	i = encodeVarintImageLayer(dAtA, i, uint64(len(m.DigestValue)))
	i += copy(dAtA[i:], m.DigestValue)
	return i, nil
}

func encodeFixed64ImageLayer(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ImageLayer(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintImageLayer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ImageLayer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovImageLayer(uint64(l))
	l = len(m.Url)
	n += 1 + l + sovImageLayer(uint64(l))
	l = len(m.DestinationPath)
	n += 1 + l + sovImageLayer(uint64(l))
	n += 1 + sovImageLayer(uint64(m.LayerType))
	n += 1 + sovImageLayer(uint64(m.MediaType))
	n += 1 + sovImageLayer(uint64(m.DigestAlgorithm))
	l = len(m.DigestValue)
	n += 1 + l + sovImageLayer(uint64(l))
	return n
}

func sovImageLayer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozImageLayer(x uint64) (n int) {
	return sovImageLayer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImageLayer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageLayer{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`DestinationPath:` + fmt.Sprintf("%v", this.DestinationPath) + `,`,
		`LayerType:` + fmt.Sprintf("%v", this.LayerType) + `,`,
		`MediaType:` + fmt.Sprintf("%v", this.MediaType) + `,`,
		`DigestAlgorithm:` + fmt.Sprintf("%v", this.DigestAlgorithm) + `,`,
		`DigestValue:` + fmt.Sprintf("%v", this.DigestValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringImageLayer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImageLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImageLayer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayerType", wireType)
			}
			m.LayerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LayerType |= (ImageLayer_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			}
			m.MediaType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MediaType |= (ImageLayer_MediaType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestAlgorithm", wireType)
			}
			m.DigestAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DigestAlgorithm |= (ImageLayer_DigestAlgorithm(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigestValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImageLayer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DigestValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImageLayer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthImageLayer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImageLayer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImageLayer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImageLayer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthImageLayer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowImageLayer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipImageLayer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthImageLayer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImageLayer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("image_layer.proto", fileDescriptorImageLayer) }

var fileDescriptorImageLayer = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0x87, 0xe3, 0xb6, 0x14, 0xd5, 0x4c, 0xab, 0xf1, 0xa0, 0xcb, 0x22, 0xe4, 0x86, 0x48, 0x93,
	0x26, 0x34, 0x5a, 0xb5, 0x52, 0x77, 0x6f, 0x59, 0xc5, 0x8a, 0x8a, 0x98, 0xd2, 0x32, 0xa1, 0x5e,
	0x2a, 0x6f, 0x31, 0x49, 0xa4, 0xa4, 0x09, 0xa9, 0x5b, 0x51, 0x4e, 0x9c, 0x7b, 0xe2, 0x0b, 0x94,
	0x33, 0x1f, 0x65, 0x37, 0x76, 0xe4, 0x34, 0xd1, 0x70, 0x41, 0x9c, 0xf6, 0x11, 0x50, 0xdc, 0x7f,
	0x59, 0x18, 0x37, 0xfb, 0xfd, 0x3d, 0xef, 0xe3, 0xd7, 0x4e, 0xe0, 0x43, 0xdb, 0xa5, 0x26, 0xeb,
	0x3b, 0x74, 0xc2, 0x82, 0x92, 0x1f, 0x78, 0xdc, 0xc3, 0x59, 0xd7, 0x33, 0x98, 0x33, 0x54, 0x9e,
	0x9b, 0x36, 0xb7, 0x46, 0xe7, 0xa5, 0x0b, 0xcf, 0x2d, 0x9b, 0x9e, 0xe9, 0x95, 0x45, 0x7c, 0x3e,
	0x7a, 0x2f, 0x76, 0x62, 0x23, 0x56, 0x8b, 0x36, 0xed, 0x7b, 0x16, 0xc2, 0x56, 0x24, 0x6b, 0x47,
	0x2e, 0xfc, 0x0c, 0x66, 0x06, 0xd4, 0x65, 0x32, 0x50, 0xc1, 0x41, 0xae, 0x51, 0xb8, 0xbc, 0x2e,
	0x4a, 0x7f, 0xae, 0x8b, 0xdb, 0x51, 0xed, 0xd0, 0x73, 0x6d, 0xce, 0x5c, 0x9f, 0x4f, 0x74, 0xc1,
	0xe0, 0x02, 0x4c, 0x8f, 0x02, 0x47, 0x4e, 0x09, 0x34, 0x13, 0xa1, 0x7a, 0x54, 0xc0, 0x65, 0x88,
	0x0c, 0x36, 0xe4, 0xf6, 0x80, 0x72, 0xdb, 0x1b, 0xf4, 0x7d, 0xca, 0x2d, 0x39, 0x1d, 0x83, 0xf2,
	0xb1, 0xf4, 0x94, 0x72, 0x0b, 0xbf, 0x82, 0x50, 0xdc, 0xa4, 0xcf, 0x27, 0x3e, 0x93, 0x33, 0x2a,
	0x38, 0xd8, 0xae, 0xee, 0x96, 0x16, 0xf7, 0x29, 0x6d, 0x86, 0x2b, 0x75, 0x27, 0x3e, 0x6b, 0xe0,
	0xe5, 0x4c, 0xb1, 0x16, 0x3d, 0x27, 0xd6, 0x51, 0x8c, 0xdf, 0x40, 0xe8, 0x32, 0xc3, 0xa6, 0x0b,
	0xd7, 0x3d, 0xe1, 0x7a, 0x72, 0x87, 0xeb, 0x75, 0x04, 0xdd, 0x16, 0x6e, 0xfa, 0xf4, 0x9c, 0xbb,
	0x8a, 0xf1, 0x07, 0x88, 0x0c, 0xdb, 0x64, 0x43, 0xde, 0xa7, 0x8e, 0xe9, 0x05, 0x36, 0xb7, 0x5c,
	0x39, 0x2b, 0xb4, 0xda, 0x1d, 0xda, 0x63, 0x81, 0xd6, 0x57, 0x64, 0x43, 0x5b, 0xca, 0x95, 0xa4,
	0x23, 0xf6, 0x9a, 0x79, 0xe3, 0x76, 0x13, 0xae, 0xc3, 0xad, 0x25, 0x3e, 0xa6, 0xce, 0x88, 0xc9,
	0xf7, 0xc5, 0xe3, 0x91, 0xa5, 0xaa, 0x10, 0xcf, 0x62, 0x9a, 0x07, 0x8b, 0xfa, 0x59, 0x54, 0xd6,
	0xbe, 0x02, 0x98, 0x4f, 0xcc, 0x82, 0x15, 0x58, 0x48, 0x94, 0x5a, 0x83, 0x31, 0x75, 0x6c, 0x03,
	0x49, 0x78, 0x1f, 0x66, 0x3b, 0x27, 0xf5, 0x6a, 0xed, 0x08, 0x01, 0x65, 0x6f, 0x3a, 0x53, 0x1f,
	0x27, 0xc8, 0x8e, 0x45, 0xab, 0xb5, 0xa3, 0x25, 0x56, 0xab, 0x54, 0x51, 0xea, 0x7f, 0x58, 0xad,
	0x52, 0xc5, 0x4f, 0x61, 0xa6, 0x73, 0x52, 0xaf, 0xa0, 0xb4, 0xb2, 0x3b, 0x9d, 0xa9, 0x3b, 0xff,
	0x42, 0x15, 0x2d, 0x80, 0xb9, 0xf5, 0x27, 0xc0, 0x8f, 0x20, 0x5a, 0x6f, 0x36, 0x33, 0xed, 0xc1,
	0x74, 0xf7, 0x65, 0x0f, 0x01, 0x05, 0x4d, 0x67, 0xea, 0xd6, 0x1a, 0xe8, 0x9a, 0x9f, 0x44, 0x54,
	0xd7, 0x51, 0x2a, 0x19, 0xd1, 0x20, 0x8a, 0x7a, 0xad, 0x53, 0x94, 0x4e, 0x44, 0x3d, 0xdb, 0xd7,
	0x0c, 0x98, 0x59, 0x1d, 0xd7, 0x5e, 0xfd, 0x30, 0x9b, 0xe3, 0x8a, 0xe2, 0x6e, 0x7a, 0xf3, 0x18,
	0x01, 0x65, 0x67, 0x3a, 0x53, 0xf3, 0x6b, 0xa6, 0x63, 0xd1, 0x80, 0x19, 0x78, 0x1f, 0xe6, 0x9a,
	0xef, 0x5e, 0xb4, 0xdf, 0x76, 0x5a, 0x67, 0x4d, 0x94, 0x52, 0x0a, 0xd3, 0x99, 0x8a, 0xd7, 0x4c,
	0xf3, 0xe3, 0x85, 0x33, 0x1a, 0xda, 0x63, 0xd6, 0x38, 0xbc, 0x9a, 0x13, 0xe9, 0xc7, 0x9c, 0x48,
	0x37, 0x73, 0x02, 0x3e, 0x87, 0x04, 0x7c, 0x0b, 0x09, 0xb8, 0x0c, 0x09, 0xb8, 0x0a, 0x09, 0xf8,
	0x19, 0x12, 0xf0, 0x3b, 0x24, 0xd2, 0x4d, 0x48, 0xc0, 0x97, 0x5f, 0x44, 0xfa, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x9e, 0x69, 0xb0, 0x42, 0xca, 0x03, 0x00, 0x00,
}
